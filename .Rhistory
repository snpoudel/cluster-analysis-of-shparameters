#set working directory
setwd("C:/NRE5605/project")
#import sh_parameters
input <- read.csv("SH_Parameters.csv")
summary(input)
View(input)
#load libraries
library(tidyverse)
#function to calcualte wsse
wsse <- function(k) {
kmeans(ts_data, k, nstart = 1000)$tot.withinss  # k-mean function
}
View(input)
hist(input)
wsse <- function(k) {
kmeans(ts_data, k, nstart = 1000)$tot.withinss  # k-mean function
}
library(hmisc)
#load libraries
library(tidyverse)
hist(input)
hist(input$Surge_threshold)
library(Hmisc)
install.packages("Hmisc")
library(Hmisc)
hist(input)
wsse(10)
#set working directory
setwd("C:/NRE5605/project")
#import sh_parameters
input <- read.csv("SH_Parameters.csv")
hist(input)
#function to calcualte wsse
wsse <- function(k) { #k is the number of clusters
kmeans(input, k, nstart = 1000)$tot.withinss  # k-mean function, data is your input data
}
wsse(10)
a <- wsse(10)
a
summary(a)
wsse(10)
?map_dbl
wsse.values <- map_dbl(k.values, wsse)
k.values <- 2:20
wsse.values <- map_dbl(k.values, wsse)
wsse.values
plot(wsse.values)
k.values <- 2:10
wsse.values <- map_dbl(k.values, wsse)
plot(wsse.values)
plot(wsse.values, type = "l")
plot(wsse.values, type = "o")
k.values <- 1:10 #gives a range for number of clusters
wsse.values <- map_dbl(k.values, wsse) #maps all the clusters numbers and gives corresponding wsse
plot(wsse.values, type = "o")
k.values <- 2:10 #gives a range for number of clusters
wsse.values <- map_dbl(k.values, wsse) #maps all the clusters numbers and gives corresponding wsse
plot(wsse.values, type = "o")
avg_sil <- function(kk) {
hm <- agnes(ts_data, diss=F, method="ward") # construct the tree with ward's method
labels=cutree(as.hclust(hm), k=kk)  # kk is the input number of clusters
ss <- silhouette(labels, dist(ts_data))
return(mean(ss[, 3]))
}
library(corrplot)
corrplot(input)
View(input)
?corrplot
cormat <- corr(input)
cormat <- cor(input)
corrplot(cormat)
corrplot(cormat, method = "circle")
# Creating the scatter plot matrix
pairs(input,
upper.panel = NULL,         # Disabling the upper panel
diag.panel = panel.hist)    # Adding the histograms
hist(input)
# Creating the scatter plot matrix
pairs(input,
upper.panel = NULL,         # Disabling the upper panel
diag.panel = panel.hist)    # Adding the histograms
# Creating the scatter plot matrix
pairs(input,
upper.panel = NULL,         # Disabling the upper panel
)    # Adding the histograms
?corrplot
corrplot(cormat, method = "circle", type = "upper")
corrplot(cormat, method = "circle", type = "lower")
?corrplot
corrplot(cormat, method = "square", type = "lower")
?corrplot
corrplot(cormat, method = "number", type = "lower")
corrplot(cormat, method = "circle", method = "number", type = "lower")
corrplot(cormat, method = "number", type = "lower")
?cor
cormat <- cor(input, method = "spearman")
corrplot(cormat, method = "number", type = "lower")
# Creating the scatter plot matrix
pairs(input,
upper.panel = NULL,         # Disabling the upper panel
)    # Adding the histograms
input <- input %>%
select(-census_tract)
hist(input)
?pairs
install.packages("GGally")
library(GGally)
ggpairs(input)
?ggpairs
ggpairs(input, diag = list(discrete = "barDiag", continuous = "densityDiag"), upper = list(na = "na"))
ggpairs(input, diag = list(discrete = "barDiag"), upper = list(na = "na"))
?ggpairs
ggpairs(input, diag = list(discrete = "barDiag"), upper = "na"))
ggpairs(input, diag = list(discrete = "barDiag"), upper = "na")
ggpairs(input, diag = list(discrete = "barDiag"), upper = NULL)
ggpairs(input, diag = list("barDiag"), upper = NULL)
?ggpairs
?pairs
install.packages("MESS")
library(MESS)
?pairs
# Creating the scatter plot matrix
pairs(input,
upper.panel = NULL,         # Disabling the upper panel
iag.panel = panel.hist)    # Adding the histograms
# Creating the scatter plot matrix
pairs(input,
upper.panel = NULL,         # Disabling the upper panel
diag.panel = panel.hist)    # Adding the histograms
?pairs
# Creating the scatter plot matrix
pairs(input,
upper.panel = NULL,         # Disabling the upper panel
diag.panel = panel.hist,
labels = "as")    # Adding the histograms
# Creating the scatter plot matrix
pairs(input,
upper.panel = NULL,         # Disabling the upper panel
diag.panel = panel.hist,
cex.labels = 1.2)    # Adding the histograms
# Creating the scatter plot matrix
pairs(input,
upper.panel = NULL,         # Disabling the upper panel
diag.panel = panel.hist,
cex.labels = 1.2, main = "ass")    # Adding the histograms
# Creating the scatter plot matrix
pairs(input,
upper.panel = NULL,         # Disabling the upper panel
diag.panel = panel.hist,
cex.labels = 1.2, main = "Pair plot of SH parameters")    # Adding the histograms
# Creating the scatter plot matrix
pairs(input,
upper.panel = NULL,         # Disabling the upper panel
diag.panel = panel.hist,
cex.labels = 1.2, main = "Pair plot of SH parameters", bg = c(1:5))    # Adding the histograms
# Creating the scatter plot matrix
pairs(input,
upper.panel = NULL,         # Disabling the upper panel
diag.panel = panel.hist,
cex.labels = 1.2, main = "Pair plot of SH parameters", bg = "red")    # Adding the histograms
# Creating the scatter plot matrix
pairs(input,
upper.panel = NULL,         # Disabling the upper panel
diag.panel = panel.hist,
cex.labels = 1.2, font.labels = 1.2, main = "Pair plot of SH parameters")    # Adding the histograms
# Creating the scatter plot matrix
pairs(input,
upper.panel = NULL,         # Disabling the upper panel
diag.panel = panel.hist,
cex.labels = 1.2, font.labels = 1.2, main = "Pair plot of SH parameters", color = "red")    # Adding the histograms
# Creating the scatter plot matrix
pairs(input,
upper.panel = NULL,         # Disabling the upper panel
diag.panel = panel.hist,
cex.labels = 1.2, font.labels = 1.2, main = "Pair plot of SH parameters", bg = "light blue")  # Adding the histograms
warnings()
# Creating the scatter plot matrix
pairs(input,
upper.panel = NULL,         # Disabling the upper panel
diag.panel = panel.hist,
cex.labels = 1.2, font.labels = 1.2, main = "Pair plot of SH parameters")  # Adding the histograms
cormat <- cor(input, method = "spearman")
corrplot(cormat, method = "number", type = "lower")
?corrplot
corrplot(input, is.corr = F, method = "number", type = "lower", )
corrplot(input, is.corr = F)
corrplot(input, is.corr = FALSE)
corrplot(cormat, method = "circle", type = "lower",diag = T )
corrplot(cormat, method = "circle", type = "lower",color = "black") #make a corrplot
corrplot(cormat, method = "circle", type = "lower",col = "black") #make a corrplot
corrplot(cormat, method = "circle", type = "lower") #make a corrplot
corrplot(cormat, method = "circle", type = "lower", outline = T) #make a corrplot
corrplot(cormat, method = "circle", type = "lower", outline = T, order = "AOE") #make a corrplot
corrplot(cormat, method = "circle", type = "lower", outline = T) #make a corrplot
corrplot(cormat, method = "circle", type = "lower", outline = T, order = "AOE") #make a corrplot
corrplot(cormat, method = "circle", type = "lower", outline = T) #make a corrplot
corrplot(cormat, method = "circle", type = "lower", outline = T, order = "AOE") #make a corrplot
corrplot(cormat, method = "circle", type = "lower", outline = T, order = "FPC") #make a corrplot
corrplot(cormat, method = "circle", type = "lower", outline = T, order = "AOC") #make a corrplot
corrplot(cormat, method = "circle", type = "lower", outline = T, order = "AOC") #make a corrplot
corrplot(cormat, method = "circle", type = "lower", outline = T, order = "AOE") #make a corrplot
corrplot(cormat, method = "number", type = "lower", outline = T, order = "AOE") #make a corrplot
corrplot(cormat, method = "number", type = "lower",col = "red" outline = T, order = "AOE") #make a corrplot
corrplot(cormat, method = "number", type = "lower",col = "red", outline = T, order = "AOE") #make a corrplot
corrplot(cormat, method = "number", type = "lower", outline = T, order = "AOE") #make a corrplot
#function to calcualte wsse
wsse <- function(k) { #k is the number of clusters
kmeans(input, k, nstart = 1000)$tot.withinss  # k-mean function, data is your input data
}
k.values <- 2:10 #gives a range for number of clusters
wsse.values <- map_dbl(k.values, wsse) #maps all the clusters numbers and gives corresponding wsse
plot(wsse.values, type = "o")
k.values <- 1:10 #gives a range for number of clusters
wsse.values <- map_dbl(k.values, wsse) #maps all the clusters numbers and gives corresponding wsse
k.values <- 2:10 #gives a range for number of clusters
wsse.values <- map_dbl(k.values, wsse) #maps all the clusters numbers and gives corresponding wsse
